This document describes how to add widgets to Glade
---------------------------------------------------

The widgets that are available in the Glade UI builder are handled in a
dynamic way and additional widgets can be added, for example from other
libraries, by installing a widget plugin.

A widget plugin consists of a catalog file and a shared library and
icons for the widgets to use in the widget palette & widget tree.

The catalog file is written in an XML format that will be described
below. There is also a DTD for the format which can be found in the widgets
directory of the glade-3 package.

Many properties of widgets can be handled automatically by the GObject
introspection features. Not all of them can though, and advanced widgets
often also need additional support from code. This is specified in the
catalog file, where you can override default values, hide properties,
specify functions to call in the installed plugin, etc.

The catalog file is also used to group the widgets in groups that
correspond to the groups in the Glade widget palette.

In theory, the catalog file should be enough, but many widgets also need
supporting code to be usable in Glade, which is where the plugin library
comes in. An example of both a catalog file and plugin library can be
found in the Glade sources, since the GTK+ widget set that is supported
by default in Glade also is implemented this way. The catalog file is
located in widgets/gtk+.xml, and the source code in src/glade-gtk.c. The
catalog file starts by specifying the name of the catalog and the plugin
library to use:

<glade-catalog name="gtk+" library="gladegtk">
  <glade-widget-classes>

    ... widgets go here

  </glade-widget-classes>

  ... widget groups go here

</glade-catalog>


When defining the catalog; the `name' and `library' are both manditory properties 
of the `glade-catalog' tag; optionally you can also use `depends' & `domain'.

The `name' property is simply a string identifier for the catalog in question; 
it will not show up in the UI anywhere.

The `library' property is a shorthand name for the plugin library which shall 
be dlopen'd from $prefix/lib/glade-3/modules/

The `depends' property is used for inheritance of support code to work properly 
(i.e. if your object derives from an object in gtk+, you'll want the default 
support code in the gladegtk plugin to be enabled for your widget too). 
This property's value is the `name' property of another installed glade plugin;
usually you'll want to declare: depends="gtk+" for your plugin.

The `domain' property is the domain in which to search for translatable strings
from the catalog file (such as glade-widget-group `title's and such; translatable
values will be marked in this document as we go along and should be any strings
that are displayed in the glade UI). If the `domain' property is not specified,
the library property will be used in it's stead.


Widget Classes
--------------

Widget classes are added using the `glade-widget-class' tag and then later
added to the palette through the `glade-widget-group' section; class-wide
parameters can be set on non-instantiatable classes; for example, parameters
for GtkBox are valid for GtkHBox & GtkVBox.

Note that there are alot of features to support alot of special-cases from
toolkits; but assuming that a widget is completely configurable via properties
and does not implement any special container relationships (which we will
explain in further detail later on) the catalog entry should really just be
a one liner like this:

    <glade-widget-class name="GtkLabel" generic-name="label" title="Label"/>

To delve further into details; the complex layout looks like this:

    <glade-widget-class name="GtkLabel" generic-name="label" title="Label">

      ... class widget support functions go here

      <properties>

        ... properties go here

      </properties>

      <children>

        ... child specific parameters go here

      </children>
    </glade-widget-class>

The name is the class name of the widget; this will essentially be used to 
instantiate the actual class by deriving "gtk_label_get_type" from "GtkLabel" 
and searching for  "gtk_label_get_type" in the support library.

Generic name is used to get the icon name for the widget palette, and is a regular 
icon theme icon. The generic name is also used to generate a default name for 
instances of the widget in the UI editor.

Title is used to display the name of the class in the palette and widget tree and
will be translated before use in the interface.

The <post-create-function> tag is a support function that gets called whenever
a widget of 'this class' (or a widget derived from 'this class' that didn't provide
its own post-create-function) is instantiated and is of the following form:

void 
glade_gtk_label_post_create (GObject *label, GladeCreateReason reason)
{
	 /* This function is called exactly once for any project object
	  * and can be for any of the following GladeCreateReason's
	  *
	  *	GLADE_CREATE_USER:    Was created at the user's request
	  *                           (this is a good time to set any properties
	  *                           or add children to the project; like GtkFrame's 
	  *                           label for example).
	  *
	  *	GLADE_CREATE_COPY:    Was created as a result of the copy/paste 
	  *                           mechanism, at this point you can count on glade
	  *                           to follow up with properties and children on 
	  *                           its own.
	  *
	  *	GLADE_CREATE_LOAD:    Was created during the load process.
	  *
	  *     GLADE_CREATE_REBUILD: Was created as a replacement for another project 
	  *                           object; this only happens when the user is 
	  *                           changing a property that is marked by the type 
	  *                           system as G_PARAM_SPEC_CONSTRUCT_ONLY.
	  */
}

The <launch-editor-function> tag is a support function used to launch a custom editor
for this class; a good example for this is the GtkMenuBar which needs a special editor
in order to be easier to use; the prototype is as follows:

    void glade_gtk_label_launch_editor (GObject *label);

The <get-internal-child-function> tag is a support function used to retrieve an internal
child of a composite object (like a button in a filechooser or something); support for
internal children must also be added to your application via libglade. The prototype is:

    void get_internal_child (GObject *object, const gchar *name, GObject **child);

where ofcourse `child' is the return pointer for the internal child of `object' called `name'.

The <get-internal-children-function> tag is a support function used to retrieve a list of
all internal children of a composite object; the prototype is as follows:

    GList *get_internal_children (GObject *object);



Properties
----------

There are alot of things that can be done with properties in glade; properties
can be added and removed from widget classes, lets list all the different
things you can do with properties.

`property' tag xml properties:

    - id:               This is manditory and specifies the property that we are modifying (or adding)

    - disabled:         Remove this property from this widget class and derived classes

    - default:          A default value to be used for this property

    - name:             The name to be used in the interface, this string is translated.
                        (if name is not specified; it defaults to the nickname of the GParamSpec)

    - translatable:     For text properties, whether the property value is translatable in glade
                        interfaces (this will enable the i18n dialog on text properties).
                        Defaults to False.

    - common:           If set to "True", the property will end up on the common tab even if
                        its not a property of GtkWidgetClass.

    - optional:         Whether this property is an optional property, this will make the property
                        insensitive and add a check box to enable it (like width/height-request for
                        example).

    - optional-default: If this is in fact an optional property; whether it is enabled by default.

    - query:            If query is set; the property will be queried from the user in a dialog
                        when adding the owning widget class instance to the project.

    - save:             Whether to save this property to the glade file (default "True")

    - visible:          Whether to show the property in the editor (default "True")

    - ignore:           Whether to set the property on the object instance (via g_object_set_property or
                        plugin override functions) when it changes in the editor (the value in the
                        editor is the value saved).

`property' tag values:


    - tooltip:          The tooltip to be displayed in the property editor for this property, this
                        is also translated. The tooltip defaults to the blurb of the associated
		        GParamSpec.

    - visible-lines:    An integer value to specify how many lines will be shown for text properties
                        in the editor (this doesnt really work because of the complexity of calculating
                        size of rendered text; instead, just set this to 2 if you want the text property
                        to be edited in a textview with a scrolled window as opposed to a simple text
                        entry).

    - set-function:     A function used to set the property instead of g_object_set()

                            void set_function (GObject *object, GValue *value);

    - get-function:     A function used to set the property instead of g_object_get()

                            void get_function (GObject *object, GValue *value);

    - verify-function:  A function to verify whether the requested value is valid. If specified; 
                        the editor will not allow the user to commit a value that this function returns
                        False for.

                            gboolean verify_function (GObject *object, GValue *value);

    - spec:             Specifies a function to be used to return a GParamSpec for this property;
                        this is used to add virtual properties to an object (like the "size" property
                        on GtkBox).

Displayable values
------------------

Enum and Flag type properties tend to have long complicated names unsuited for the glade
environment, glade will allow you to substitute these names using the displayable-values
child tag; the form looks like this:

    <property id="pack-type">
      <displayable-values>
	<value id="GTK_PACK_START" name="Start"></value>
	<value id="GTK_PACK_END" name="End"></value>
      </displayable-values>
    </property>

Note that the "name" (which will be the resulting name for each `id') is a translated
string.

Packing Defaults
----------------

A widget class may have default packing properties for each type of container that
it can be added to; a short example should suffice as a description of how this works:

  <packing-defaults>
    <parent-class name="GtkVBox">
      <child-property id="expand" default="false"/>
    </parent-class>
  </packing-defaults>

Property parameters
-------------------

Properties can have additional parameters; these are completely unused by glade
but may be usefull for a plugin writer who may want to use the GladeParameter
api to find parameters on property classes; the form looks like this:

    <property id="foo">
      <parameters>
        <parameter key="Min" value="1"/>
        <parameter key="Max" value="10000"/>
      </parameters>
    </property>

Container widgets
-----------------

GtkContainer objects which parent GtkWidget objects have built-in detection in the
glade core; but other container relationships may be constructed; if for example you
wished to treat a GtkMenuBar --> GtkMenuItem relationship specially in the plugin;
Any GObject can parent any GObject. The default GtkContainer --> GtkWidget relationship
can also be modified for a GtkContainer derived object.

Child support definitions are identified by the GType of supported child class and
are embedded into a glade-widget-class block like so:

    <glade-widget-class name="Foo">

      <children>
	<child>
	  <type>Bar</type>

          ... "Foo --> Bar" "parent --> child" relationship special-casing goes here

          <properties>

            ... packing property definition for this container relationship

          </properties>
	</child>
      </children>

    </glade-widget-class>

Note that you can access and modify and even add virtual packing properties in
exactly the same way as previously described with normal object properties.

Child support definition parameters (all tag values and no xml tag properties):

    - add-child-function & remove-child-function:    

      Used to add and remove child objects from parent objects.

      void add_child (GObject *object, GObject *child);
      void remove_child (GObject *object, GObject *child);

    - replace-child-function:

      Used primarily for placholder swapping.

      void replace_child (GtkWidget *container, GtkWidget *current, GtkWidget *new);

    - get-children-function/get-all-children-function:

      Return a list of children for this container (all-children should include internal
      children).

      GList *get_[all_]children (GObject *container);

    - child-set-property-function/child-get-property-function:

      Set/Get packing properties for this child

      void child_set_property (GObject            *container,
                               GObject            *child,
                               const gchar        *property_name,
                               const GValue       *value);

      void child_get_property (GObject            *container,
                               GObject            *child,
                               const gchar        *property_name,
                               GValue             *value);

    - special-child-type:

      A special type identifier that will indicate whether this is an alternate
      child type; such as a notebook tab label or a frame label.

      The value of special-child-type is the name of the added packing property for this
      child type; you must then use the type to add children to the "correct port" at load
      time.

      Currently this isnt very neatly done; you must g_object_set_data (child, "special-child-type", type);
      when creating special child types and handle it on replace-child; look at glade-gtk.c for 
      examples.

Grouping
--------

The widgets are groups in different groups in the Glade UI. Those groups
are defined in the catalog file as follows:

 <glade-widget-group name="my-widgets" title="My widgets">
    <glade-widget-class-ref name="MyFirstWidget"/>
    <glade-widget-class-ref name="MysecondWidget"/>

    ...
 </glade-widget-group>


The file should contain one or more widget groups.


Validating the catalog file
---------------------------

The DTD that is shipped with Glade can be used to validate your catalog
file. Note that properties must be entered in the same order as they are
specified in the DTD for the validation to pass.

To validate a file, do this:

 xmllint --dtdvalid glade-catalog.dtd --noout my-catalog.xml



Installing a plugin
-------------------

To install a widget plugin, the catalog XML file should be copied into
the catalog directory:

  $(datadir)/glade-3/catalogs

The icons for palette etc go into:

  $(datadir)/glade-3/pixmaps

The plugin library should be installed into the modules directory:

  $(libdir)/glade-3/modules
