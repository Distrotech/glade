Instructions on how to build a bundle for 64bit linux systems.

System requirements
~~~~~~~~~~~~~~~~~~~

  o A 64bit linux system

  o AppImageKit (https://github.com/probonopd/AppImageKit)

    To build AppImageKit, you will require:
      - A functional cross compiler to generate 32bit binaries as well as 64bit binaries
      - libfuse (if AppImageKit doesnt find it, make sure there is a symbolic link to libfuse.so
        from it's actual library, this is because AppImageKit uses CMake, which is just dumb).
      - An old glib version installed on your system, the older the glib version the better
        (this system glib version will be required on target hosts which want to run the bundle).
      - Some other things like python, which you will just have to deal with the CMakeLists.txt
        to figure out.

  o jhbuild

    The bundler mechanism for Glade comes in the form of a jhbuild scripted environment, you will
    need a relatively new checkout of jhbuild.

  o chrpath

    This will be required after your build root is complete, we use it to strip out the -rpaths which
    libtool loves to embed into binaries.

  o Vala compiler, we'll be using valac --pkg gee-0.8 --pkg posix --pkg glib-2.0 --pkg gio-2.0


Build Instructions
~~~~~~~~~~~~~~~~~~
Make sure you have Glade sources *first*.

We will refer to your Glade checkout or tarball directory as ${GLADE_CHECKOUT}, we expect
this to be a "/full/path/to/the/checkout/of/glade"


  Build the LibcWrapGenerator
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  To update the libcwrap.h for your system's version of glibc, first you must build
  the LibcWrapGenerator like so:

    cd ${GLADE_CHECKOUT}/build/linux
    valac  --pkg gee-0.8 --pkg posix --pkg glib-2.0 --pkg gio-2.0 LibcWrapGenerator.vala

  Note that the environment in which you choose to build and run the generator is of
  absolutely no consequence, I had to build & run this from an existing jhbuild environment
  because I lacked the gee-0.8, this is absolutely not a problem.


  Updating libcwrap.h
  ~~~~~~~~~~~~~~~~~~~
  The libcwrap.h header file is the magick which ensures that you target a specific
  version of the glibc ABI.

  To generate the libcwrap.h file, run the generator like so:

    cd ${GLADE_CHECKOUT}/build/linux
    ./LibcWrapGenerator libcwrap.h 2.7 /path/to/libc/runtime/libraries

  We recommend using 2.7 as a stable base glibc requirement, the patches
  for this bundle (which are only a few) allow usage of glibc 2.7 and later.

  The path to your libc runtime should be a directory containing libc.so.6
  and other libc runtime libraries, some systems keep this in different
  directories (i.e. /lib/x86_64-linux-gnu, /lib, /lib64 are good bets).

  For a more detailed explanation of what libcwrap.h does, look into the
  file header of LibcWrapGenerator.vala.


  Building AppImageKit
  ~~~~~~~~~~~~~~~~~~~~
  Fetch AppImageKit form https://github.com/probonopd/AppImageKit/

  To build follow these steps:

    cd AppImageKit
    export CC='gcc -U_FORTIFY_SOURCE -include ${GLADE_CHECKOUT}/build/linux/libcwrap.h'
    cmake .
    make
    unset CC


  Building the stack
  ~~~~~~~~~~~~~~~~~~
  The AppDir is what AppImageKit refers to as the root filesystem inside the
  bundle.

  The provided jhbuild scripts will create a directory in your ${HOME} named
  'AppImages', all of our building & bundling will take place inside this directory.

  Note, if you already have a jhbuild environment there is no need to worry,
  our scripts do not interfere with your existing jhbuild environment.

  To build the whole stack up to Glade, including Glade, issue this command:

    GLADE_DIR=${GLADE_CHECKOUT} jhbuild -f ${GLADE_CHECKOUT}/build/linux/jhbuildrc build glade

  I've found the build to break sometimes at 'shared-mime-info', in this case I just rerun
  the above command and it passes on the second try... nothing to see here... carry on...


  Post processing the image directory
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Some post processing is needed on the AppDir, we intentionally keep this separate from
  the jhbuild setup. To perform the needed post processing, issue this command:

    ${GLADE_CHECKOUT}/build/linux/PrepareAppDir.sh ${HOME}/AppImages/Install ${GLADE_CHECKOUT}

  WARNING: The above script will modify the ${HOME}/AppImages/Install directory in such
  a way that it cannot be rebuilt (development headers and unneeded cruft is removed
  from the installation directory). This is why we use a script as a separate stage from
  building.

  At this point, you should have a fully functional image in ${HOME}/AppImages/Install


Bundling
~~~~~~~~
Build the bundle with one simple command:

    /path/to/AppImageKit/AppImageAssistant ${HOME}/AppImages/Install /path/to/generated/glade

This will create a huge binary named 'glade' at the location of your choosing.


Running and Debugging the bundle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can run the created bundle by simply executing it, hopefully
this will work on a large variety of 64-bit linux systems.

If things turn out badly, you can debug it by typing:

    APP_IMAGE_TEST=1 ./glade

Instead of running glade, this will give you a shell inside
the mounted bundle environment.

Some checks you may want to perform include:

    ldd bin/glade

This should show you which libraries are linked to the system
and which are properly pulled from the bundle. We've intentionally
left out X11 libraries, fontconfig and freetype, so these should
be pulled from somewhere in your system directories.

    LD_DEBUG=all ./bin/glade > ${HOME}/bindings.log 2>&1

This will create a log of all the symbol bindings, you may want
to check here if any symbol originating in the bundle is bound
to GLIBC > 2.7, the intention with this configuration is to aim
for a low glibc dependency, if libraries inside your bundle require
a higher libc version than 2.7 then the libcwrap.h file probably
needs to be regenerated (the committed version should work for
glibc ABI versions up to 2.15).

Note that as we rely on the system's Xlib libraries, fontconfig
and freetype libraries, there will be references to GLIBC > 2.7
from those system libraries, this is not a problem at all as they
will be resolved differently on hosts with older glibc.
