Instructions on how to build a bundle for 64bit linux systems.


System requirements
~~~~~~~~~~~~~~~~~~~

  o A 64bit linux system

  o AppImageKit (https://github.com/tristanvb/AppImageKit/)

    To build AppImageKit, you will require:
      - A functional cross compiler to generate 32bit binaries as well as 64bit binaries
      - libfuse (if AppImageKit doesnt find it, make sure there is a symbolic link to libfuse.so
        from it's actual library, this is because AppImageKit uses CMake, which is just dumb).
      - An old glib version installed on your system, the older the glib version the better
        (this system glib version will be required on target hosts which want to run the bundle).
      - Some other things like python, which you will just have to deal with the CMakeLists.txt
        to figure out.

  o jhbuild

    The bundler mechanism for Glade comes in the form of a jhbuild scripted environment, you will
    need a relatively new checkout of jhbuild.

  o chrpath

    This will be required after your build root is complete, we use it to strip out the -rpaths which
    libtool loves to embed into binaries.


Build Instructions
~~~~~~~~~~~~~~~~~~
Make sure you have Glade sources *first*.

We will refer to your Glade checkout or tarball directory as ${GLADE_CHECKOUT}, we expect
this to be a "/full/path/to/the/checkout/of/glade"


Building AppImageKit
~~~~~~~~~~~~~~~~~~~~
Fetch AppImageKit form https://github.com/tristanvb/AppImageKit/

To build follow these steps:

  cd AppImageKit
  export CC='gcc -U_FORTIFY_SOURCE -include ${GLADE_CHECKOUT}/build/linux64/libcwrap.h'
  cmake .
  make
  unset CC

This trick with overriding CC should build your AppImageKit in such a way that
it depends only on the glibc 2.7 ABI.


Building the AppDir
~~~~~~~~~~~~~~~~~~~
The AppDir is what AppImageKit refers to as the root filesystem inside the
bundle.

The provided jhbuild scripts will create a directory in your ${HOME} named
'AppImages', if you already have a jhbuild environment there is no need to worry,
our scripts do not interfere with your existing jhbuild environment.

To build the whole stack up to Glade, including Glade, issue this command:

    GLADE_DIR=${GLADE_CHECKOUT} jhbuild -f ${GLADE_CHECKOUT}/build/linux64/jhbuildrc build glade

Some post processing is needed on the AppDir, we intentionally keep this separate from
the jhbuild setup. To perform the needed post processing, issue this command:

    ${GLADE_CHECKOUT}/build/linux64/PrepareAppDir.sh ${HOME}/AppImages/Install ${GLADE_CHECKOUT}

The script takes the path to the AppDir, which is hard coded to be in your ${HOME},
as well as the path to your glade checkout.

Finally, you need to add the AppRun program to your AppDir:

    cp /path/to/AppImageKit/AppRun ${HOME}/AppImages/Install

This should give you a fully functional image in ${HOME}/AppImages/Install


Bundling the AppDir
~~~~~~~~~~~~~~~~~~~
Build the bundle with one simple command:

    /path/to/AppImageKit/AppImageAssistant ${HOME}/AppImages/Install glade

This will create a huge binary named 'glade'


Running and Debugging the bundle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can run the created bundle by simply executing it, hopefully
this will work on a large variety of 64-bit linux systems.

If things turn out badly, you can debug it by typing:

    APP_IMAGE_TEST=1 ./glade

Instead of running glade, this will give you a shell inside
the mounted bundle environment.

Some checks you may want to perform include:

    ldd bin/glade

This should show you which libraries are linked to the system
and which are properly pulled from the bundle. We've intentionally
left out X11 libraries, fontconfig and freetype, so these should
be pulled from somewhere in your system directories.

    LD_DEBUG=bindings ./bin/glade > ${HOME}/bindings.log 2>&1

This will create a log of all the symbol bindings, you may want
to check here if anything symbol originating in the bundle is bound
to GLIBC > 2.7, the intention with this configuration is to aim
for a low glibc dependency, if libraries inside your bundle require
a higher libc version than 2.7 then the libcwrap.h file probably
needs to be regenerated (the committed version should work for
glibc ABI versions up to 2.15).

