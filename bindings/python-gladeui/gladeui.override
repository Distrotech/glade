/* -*- Mode: C; c-basic-offset: 8 -*- */
%%
headers
#define NO_IMPORT_PYGOBJECT
#include <pygobject.h>
#include <pygtk/pygtk.h>

#include <glib.h>

#include <gladeui/glade.h>
#include <gladeui/glade-app.h>
#include <gladeui/glade-base-editor.h>
#include <gladeui/glade-binding.h>
#include <gladeui/glade-builtins.h>
#include <gladeui/glade-clipboard-view.h>
#include <gladeui/glade-clipboard.h>
#include <gladeui/glade-command.h>
#include <gladeui/glade-custom.h>
#include <gladeui/glade-design-layout.h>
#include <gladeui/glade-design-view.h>
#include <gladeui/glade-editor-property.h>
#include <gladeui/glade-editor.h>
#include <gladeui/glade-fixed.h>
#include <gladeui/glade-palette-item.h>
#include <gladeui/glade-palette.h>
#include <gladeui/glade-placeholder.h>
#include <gladeui/glade-inspector.h>
#include <gladeui/glade-project.h>
#include <gladeui/glade-property-class.h>
#include <gladeui/glade-property.h>
#include <gladeui/glade-signal-editor.h>
#include <gladeui/glade-signal.h>
#include <gladeui/glade-widget-adaptor.h>
#include <gladeui/glade-widget.h>

static gboolean
glade_python_support_init_value (GObject *object,
				 gboolean is_pack,
				 const gchar *property_name,
				 GValue *value)
{
	GladeWidget *widget;
	GladeProperty *property;
	
	if ((widget = glade_widget_get_from_gobject (object)) == NULL)
	{
		PyErr_Format (PyExc_AssertionError, "GladeWidget != NULL");
		return FALSE;
	}
	
	if (is_pack)
		property = glade_widget_get_pack_property (widget, property_name);
	else
		property = glade_widget_get_property (widget, property_name);
	
	if (property == NULL)
	{
        	PyErr_Format (PyExc_TypeError, "'%s' does not support %s property `%s'",
			      glade_widget_get_name (widget),
			      (is_pack) ? "packing" : "",
			      property_name);
		return FALSE;
	}
	
	g_value_init (value, G_VALUE_TYPE (property->value));
	return TRUE;
}


static GList *
glade_python_support_glist_from_list (PyObject *list)
{
	gint i, size = PyList_Size (list);
	GList *retval = NULL;
	
	for (i = 0; i < size; i++)
	{
		PyObject *val = PyList_GetItem (list, i);
		retval = g_list_prepend (retval, pygobject_get(val));
	}
	return retval;
}

static PyObject *
glade_python_support_list_from_glist (GList *list)
{
	PyObject *retval = PyList_New (0);;
	
	for (; list; list = g_list_next (list))
	{
		GObject *obj = list->data;
		PyList_Append (retval, Py_BuildValue ("O", pygobject_new (obj)));
	}
	
	return retval;
}


%%
modulename gladeui                     
%%
import gobject.GObject as PyGObject_Type
import gtk.gdk.Window as PyGdkWindow_Type
import gtk.Table as PyGtkTable_Type
import gtk.Bin as PyGtkBin_Type
import gtk.Container as PyGtkContainer_Type
import gtk.Widget as PyGtkWidget_Type
import gtk.AccelGroup as PyGtkAccelGroup_Type
import gtk.VBox as PyGtkVBox_Type
import gtk.HBox as PyGtkHBox_Type
import gtk.ToggleButton as PyGtkToggleButton_Type
import gtk.ScrolledWindow as PyGtkScrolledWindow_Type
import gtk.TextBuffer as PyGtkTextBuffer_Type
import gtk.ListStore as PyGtkListStore_Type
import gtk.Window as PyGtkWindow_Type
import gtk.TreeStore as PyGtkTreeStore_Type
import gtk.TreeModel as PyGtkTreeModel_Type
import gtk.ListStore as PyGtkListStore_Type
import gtk.TextView as PyGtkTextView_Type
%%
ignore-glob
  *_get_type                            
%%
override glade_app_get_catalogs_dir
static PyObject *
_wrap_glade_app_get_catalogs_dir(PyGObject *self)
{
    const gchar *ret;

    
    ret = glade_app_get_catalogs_dir();
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override glade_app_get_modules_dir
static PyObject *
_wrap_glade_app_get_modules_dir(PyGObject *self)
{
    const gchar *ret;

    
    ret = glade_app_get_modules_dir();
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override glade_app_get_plugins_dir
static PyObject *
_wrap_glade_app_get_plugins_dir(PyGObject *self)
{
    const gchar *ret;

    
    ret = glade_app_get_plugins_dir();
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override glade_app_get_pixmaps_dir
static PyObject *
_wrap_glade_app_get_pixmaps_dir(PyGObject *self)
{
    const gchar *ret;

    
    ret = glade_app_get_pixmaps_dir();
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override glade_app_get_locale_dir
static PyObject *
_wrap_glade_app_get_locale_dir(PyGObject *self)
{
    const gchar *ret;

    
    ret = glade_app_get_locale_dir();
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override glade_app_get_bindings_dir
static PyObject *
_wrap_glade_app_get_bindings_dir(PyGObject *self)
{
    const gchar *ret;

    
    ret = glade_app_get_bindings_dir();
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override glade_app_get_palette
static PyObject *
_wrap_glade_app_get_palette(PyGObject *self)
{
    GladePalette *ret;

    
    ret = glade_app_get_palette();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}
%%
override glade_app_get_project
static PyObject *
_wrap_glade_app_get_project(PyGObject *self)
{
    GladeProject *ret;

    
    ret = glade_app_get_project();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}
%%
override glade_app_set_project kwargs
static PyObject *
_wrap_glade_app_set_project(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "project", NULL };
    PyGObject *project;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GladeApp.set_project", kwlist, &PyGladeProject_Type, &project))
        return NULL;
    
    glade_app_set_project(GLADE_PROJECT(project->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override glade_app_add_project kwargs
static PyObject *
_wrap_glade_app_add_project(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "project", NULL };
    PyGObject *project;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GladeApp.add_project", kwlist, &PyGladeProject_Type, &project))
        return NULL;
    
    glade_app_add_project(GLADE_PROJECT(project->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override glade_app_remove_project kwargs
static PyObject *
_wrap_glade_app_remove_project(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "project", NULL };
    PyGObject *project;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GladeApp.remove_project", kwlist, &PyGladeProject_Type, &project))
        return NULL;
    
    glade_app_remove_project(GLADE_PROJECT(project->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override GladeWidgetAdaptor__do_verify_property kwargs
static PyObject *
_wrap_GladeWidgetAdaptor__do_verify_property(PyObject *cls, PyObject *args, PyObject *kwargs)
{
    gpointer klass;
    static char *kwlist[] = { "self", "object", "property_name", "value", NULL };
    PyGObject *self, *object;
    char *property_name;
    int ret;
    GValue value = {0,};
    PyObject *val;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!O!sO:GladeWidgetAdaptor.verify_property", kwlist, &PyGladeWidgetAdaptor_Type, &self, &PyGObject_Type, &object, &property_name, &val))
        return NULL;
    klass = g_type_class_ref(pyg_type_from_object(cls));
    
    glade_python_support_init_value (object->obj, FALSE, property_name, &value);
    pyg_value_from_pyobject (&value, val);
    
    if (GLADE_WIDGET_ADAPTOR_CLASS(klass)->verify_property)
        ret = GLADE_WIDGET_ADAPTOR_CLASS(klass)->verify_property(GLADE_WIDGET_ADAPTOR(self->obj), G_OBJECT(object->obj), property_name, &value);
    else {
        PyErr_SetString(PyExc_NotImplementedError, "virtual method GladeWidgetAdaptor.verify_property not implemented");
        g_type_class_unref(klass);
        return NULL;
    }
    g_type_class_unref(klass);
    return PyBool_FromLong(ret);

}
%%
override GladeWidgetAdaptor__proxy_do_verify_property
static gboolean
_wrap_GladeWidgetAdaptor__proxy_do_verify_property(GladeWidgetAdaptor *self, GObject*object, const gchar*property_name, const GValue*value)
{
    PyGILState_STATE __py_state;
    PyObject *py_self;
    PyObject *py_object = NULL;
    PyObject *py_property_name;
    PyObject *py_value;
    gboolean retval;
    PyObject *py_retval;
    PyObject *py_args;
    PyObject *py_method;
    
    __py_state = pyg_gil_state_ensure();
    py_self = pygobject_new((GObject *) self);
    if (!py_self) {
        if (PyErr_Occurred())
            PyErr_Print();
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    if (object)
        py_object = pygobject_new((GObject *) object);
    else {
        Py_INCREF(Py_None);
        py_object = Py_None;
    }
    py_property_name = PyString_FromString(property_name);
    if (!py_property_name) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_object);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    py_value = pyg_value_as_pyobject(value, TRUE);
    if (!py_value) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_property_name);
        Py_DECREF(py_object);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    
    py_args = PyTuple_New(3);
    PyTuple_SET_ITEM(py_args, 0, py_object);
    PyTuple_SET_ITEM(py_args, 1, py_property_name);
    PyTuple_SET_ITEM(py_args, 2, py_value);
    
    py_method = PyObject_GetAttrString(py_self, "do_verify_property");
    if (!py_method) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    py_retval = PyObject_CallObject(py_method, py_args);
    if (!py_retval) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    retval = PyObject_IsTrue(py_retval)? TRUE : FALSE;
    
    Py_DECREF(py_retval);
    Py_DECREF(py_method);
    Py_DECREF(py_args);
    Py_DECREF(py_self);
    pyg_gil_state_release(__py_state);
    
    return retval;
}
%%
override GladeWidgetAdaptor__do_set_property kwargs
static PyObject *
_wrap_GladeWidgetAdaptor__do_set_property(PyObject *cls, PyObject *args, PyObject *kwargs)
{
    gpointer klass;
    static char *kwlist[] = { "self", "object", "property_name", "value", NULL };
    PyGObject *self, *object;
    char *property_name;
    GValue value = {0,};
    PyObject *val;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!O!sO:GladeWidgetAdaptor.set_property", kwlist, &PyGladeWidgetAdaptor_Type, &self, &PyGObject_Type, &object, &property_name, &val))
        return NULL;
    klass = g_type_class_ref(pyg_type_from_object(cls));
    
    glade_python_support_init_value (object->obj, FALSE, property_name, &value);
    pyg_value_from_pyobject (&value, val);
    
    if (GLADE_WIDGET_ADAPTOR_CLASS(klass)->set_property)
        GLADE_WIDGET_ADAPTOR_CLASS(klass)->set_property(GLADE_WIDGET_ADAPTOR(self->obj), G_OBJECT(object->obj), property_name, &value);
    else {
        PyErr_SetString(PyExc_NotImplementedError, "virtual method GladeWidgetAdaptor.set_property not implemented");
        g_type_class_unref(klass);
        return NULL;
    }
    g_type_class_unref(klass);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override GladeWidgetAdaptor__proxy_do_set_property
static void
_wrap_GladeWidgetAdaptor__proxy_do_set_property(GladeWidgetAdaptor *self, GObject*object, const gchar*property_name, const GValue*value)
{
    PyGILState_STATE __py_state;
    PyObject *py_self;
    PyObject *py_object = NULL;
    PyObject *py_property_name;
    PyObject *py_value;
    PyObject *py_retval;
    PyObject *py_args;
    PyObject *py_method;
    
    __py_state = pyg_gil_state_ensure();
    py_self = pygobject_new((GObject *) self);
    if (!py_self) {
        if (PyErr_Occurred())
            PyErr_Print();
        pyg_gil_state_release(__py_state);
        return;
    }
    if (object)
        py_object = pygobject_new((GObject *) object);
    else {
        Py_INCREF(Py_None);
        py_object = Py_None;
    }
    py_property_name = PyString_FromString(property_name);
    if (!py_property_name) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_object);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    py_value = pyg_value_as_pyobject(value, TRUE);
    if (!py_value) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_property_name);
        Py_DECREF(py_object);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    
    py_args = PyTuple_New(3);
    PyTuple_SET_ITEM(py_args, 0, py_object);
    PyTuple_SET_ITEM(py_args, 1, py_property_name);
    PyTuple_SET_ITEM(py_args, 2, py_value);
    
    py_method = PyObject_GetAttrString(py_self, "do_set_property");
    if (!py_method) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    py_retval = PyObject_CallObject(py_method, py_args);
    if (!py_retval) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    if (py_retval != Py_None) {
        if (PyErr_Occurred())
            PyErr_Print();
        PyErr_SetString(PyExc_TypeError, "retval should be None");
        Py_DECREF(py_retval);
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    
    Py_DECREF(py_retval);
    Py_DECREF(py_method);
    Py_DECREF(py_args);
    Py_DECREF(py_self);
    pyg_gil_state_release(__py_state);
}
%%
override GladeWidgetAdaptor__do_get_property kwargs
static PyObject *
_wrap_GladeWidgetAdaptor__do_get_property(PyObject *cls, PyObject *args, PyObject *kwargs)
{
    gpointer klass;
    static char *kwlist[] = { "self", "object", "property_name", NULL };
    PyGObject *self, *object;
    char *property_name;
    GValue value = {0,};
    PyObject *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!O!s:GladeWidgetAdaptor.get_property", kwlist, &PyGladeWidgetAdaptor_Type, &self, &PyGObject_Type, &object, &property_name))
        return NULL;
    klass = g_type_class_ref(pyg_type_from_object(cls));
    
    if (GLADE_WIDGET_ADAPTOR_CLASS(klass)->get_property)
    {
	glade_python_support_init_value (object->obj, FALSE, property_name, &value);
        GLADE_WIDGET_ADAPTOR_CLASS(klass)->get_property(GLADE_WIDGET_ADAPTOR(self->obj), G_OBJECT(object->obj), property_name, &value);
	ret = pyg_value_as_pyobject (&value, TRUE);
	g_value_unset (&value);
    }
    else {
        PyErr_SetString(PyExc_NotImplementedError, "virtual method GladeWidgetAdaptor.get_property not implemented");
        g_type_class_unref(klass);
        return NULL;
    }
    g_type_class_unref(klass);
    return ret;
}
%%
override GladeWidgetAdaptor__proxy_do_get_property
static void
_wrap_GladeWidgetAdaptor__proxy_do_get_property(GladeWidgetAdaptor *self, GObject*object, const gchar*property_name, GValue *value)
{
    PyGILState_STATE __py_state;
    PyObject *py_self;
    PyObject *py_object = NULL;
    PyObject *py_property_name;
    PyObject *py_retval;
    PyObject *py_args;
    PyObject *py_method;
    
    __py_state = pyg_gil_state_ensure();
    py_self = pygobject_new((GObject *) self);
    if (!py_self) {
        if (PyErr_Occurred())
            PyErr_Print();
        pyg_gil_state_release(__py_state);
        return;
    }
    if (object)
        py_object = pygobject_new((GObject *) object);
    else {
        Py_INCREF(Py_None);
        py_object = Py_None;
    }
    py_property_name = PyString_FromString(property_name);
    if (!py_property_name) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_object);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    
    py_args = PyTuple_New(3);
    PyTuple_SET_ITEM(py_args, 0, py_object);
    PyTuple_SET_ITEM(py_args, 1, py_property_name);
    
    py_method = PyObject_GetAttrString(py_self, "do_get_property");
    if (!py_method) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    py_retval = PyObject_CallObject(py_method, py_args);
    if (!py_retval) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }

    pyg_value_from_pyobject (value, py_retval);
    
    Py_DECREF(py_retval);
    Py_DECREF(py_method);
    Py_DECREF(py_args);
    Py_DECREF(py_self);
    pyg_gil_state_release(__py_state);
}
%%
override GladeWidgetAdaptor__do_child_verify_property kwargs
static PyObject *
_wrap_GladeWidgetAdaptor__do_child_verify_property(PyObject *cls, PyObject *args, PyObject *kwargs)
{
    gpointer klass;
    static char *kwlist[] = { "self", "container", "child", "property_name", "value", NULL };
    PyGObject *self, *container, *child;
    char *property_name;
    int ret;
    GValue value = {0,};
    PyObject *val;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!O!O!sO:GladeWidgetAdaptor.child_verify_property", kwlist, &PyGladeWidgetAdaptor_Type, &self, &PyGObject_Type, &container, &PyGObject_Type, &child, &property_name, &val))
        return NULL;
    klass = g_type_class_ref(pyg_type_from_object(cls));
    
    glade_python_support_init_value (child->obj, TRUE, property_name, &value);
    pyg_value_from_pyobject (&value, val);
    
    if (GLADE_WIDGET_ADAPTOR_CLASS(klass)->child_verify_property)
        ret = GLADE_WIDGET_ADAPTOR_CLASS(klass)->child_verify_property(GLADE_WIDGET_ADAPTOR(self->obj), G_OBJECT(container->obj), G_OBJECT(child->obj), property_name, &value);
    else {
        PyErr_SetString(PyExc_NotImplementedError, "virtual method GladeWidgetAdaptor.child_verify_property not implemented");
        g_type_class_unref(klass);
        return NULL;
    }
    g_type_class_unref(klass);
    return PyBool_FromLong(ret);

}
%%
override GladeWidgetAdaptor__proxy_do_child_verify_property
static gboolean
_wrap_GladeWidgetAdaptor__proxy_do_child_verify_property(GladeWidgetAdaptor *self, GObject*container, GObject*child, const gchar*property_name, GValue*value)
{
    PyGILState_STATE __py_state;
    PyObject *py_self;
    PyObject *py_container = NULL;
    PyObject *py_child = NULL;
    PyObject *py_property_name;
    PyObject *py_value;
    gboolean retval;
    PyObject *py_retval;
    PyObject *py_args;
    PyObject *py_method;
    
    __py_state = pyg_gil_state_ensure();
    py_self = pygobject_new((GObject *) self);
    if (!py_self) {
        if (PyErr_Occurred())
            PyErr_Print();
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    if (container)
        py_container = pygobject_new((GObject *) container);
    else {
        Py_INCREF(Py_None);
        py_container = Py_None;
    }
    if (child)
        py_child = pygobject_new((GObject *) child);
    else {
        Py_INCREF(Py_None);
        py_child = Py_None;
    }
    py_property_name = PyString_FromString(property_name);
    if (!py_property_name) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_child);
        Py_DECREF(py_container);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    py_value = pyg_value_as_pyobject(value, TRUE);
    if (!py_value) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_property_name);
        Py_DECREF(py_child);
        Py_DECREF(py_container);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    
    py_args = PyTuple_New(4);
    PyTuple_SET_ITEM(py_args, 0, py_container);
    PyTuple_SET_ITEM(py_args, 1, py_child);
    PyTuple_SET_ITEM(py_args, 2, py_property_name);
    PyTuple_SET_ITEM(py_args, 3, py_value);
    
    py_method = PyObject_GetAttrString(py_self, "do_child_verify_property");
    if (!py_method) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    py_retval = PyObject_CallObject(py_method, py_args);
    if (!py_retval) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    retval = PyObject_IsTrue(py_retval)? TRUE : FALSE;
    
    Py_DECREF(py_retval);
    Py_DECREF(py_method);
    Py_DECREF(py_args);
    Py_DECREF(py_self);
    pyg_gil_state_release(__py_state);
    
    return retval;
}
%%
override GladeWidgetAdaptor__do_child_set_property kwargs
static PyObject *
_wrap_GladeWidgetAdaptor__do_child_set_property(PyObject *cls, PyObject *args, PyObject *kwargs)
{
    gpointer klass;
    static char *kwlist[] = { "self", "container", "child", "property_name", "value", NULL };
    PyGObject *self, *container, *child;
    char *property_name;
    GValue value = {0,};
    PyObject *val;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!O!O!sO:GladeWidgetAdaptor.child_set_property", kwlist, &PyGladeWidgetAdaptor_Type, &self, &PyGObject_Type, &container, &PyGObject_Type, &child, &property_name, &val))
        return NULL;
    klass = g_type_class_ref(pyg_type_from_object(cls));
    
    glade_python_support_init_value (child->obj, TRUE, property_name, &value);
    pyg_value_from_pyobject (&value, val);
    
    if (GLADE_WIDGET_ADAPTOR_CLASS(klass)->child_set_property)
        GLADE_WIDGET_ADAPTOR_CLASS(klass)->child_set_property(GLADE_WIDGET_ADAPTOR(self->obj), G_OBJECT(container->obj), G_OBJECT(child->obj), property_name, &value);
    else {
        PyErr_SetString(PyExc_NotImplementedError, "virtual method GladeWidgetAdaptor.child_set_property not implemented");
        g_type_class_unref(klass);
        return NULL;
    }
    g_type_class_unref(klass);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override GladeWidgetAdaptor__proxy_do_child_set_property
static void
_wrap_GladeWidgetAdaptor__proxy_do_child_set_property(GladeWidgetAdaptor *self, GObject*container, GObject*child, const gchar*property_name, const GValue *value)
{
    PyGILState_STATE __py_state;
    PyObject *py_self;
    PyObject *py_container = NULL;
    PyObject *py_child = NULL;
    PyObject *py_property_name;
    PyObject *py_value;
    PyObject *py_retval;
    PyObject *py_args;
    PyObject *py_method;
    
    __py_state = pyg_gil_state_ensure();
    py_self = pygobject_new((GObject *) self);
    if (!py_self) {
        if (PyErr_Occurred())
            PyErr_Print();
        pyg_gil_state_release(__py_state);
        return;
    }
    if (container)
        py_container = pygobject_new((GObject *) container);
    else {
        Py_INCREF(Py_None);
        py_container = Py_None;
    }
    if (child)
        py_child = pygobject_new((GObject *) child);
    else {
        Py_INCREF(Py_None);
        py_child = Py_None;
    }
    py_property_name = PyString_FromString(property_name);
    if (!py_property_name) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_child);
        Py_DECREF(py_container);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    py_value = pyg_value_as_pyobject (value, TRUE);
    if (!py_value) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_property_name);
        Py_DECREF(py_child);
        Py_DECREF(py_container);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    
    py_args = PyTuple_New(4);
    PyTuple_SET_ITEM(py_args, 0, py_container);
    PyTuple_SET_ITEM(py_args, 1, py_child);
    PyTuple_SET_ITEM(py_args, 2, py_property_name);
    PyTuple_SET_ITEM(py_args, 3, py_value);
    
    py_method = PyObject_GetAttrString(py_self, "do_child_set_property");
    if (!py_method) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    py_retval = PyObject_CallObject(py_method, py_args);
    if (!py_retval) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    if (py_retval != Py_None) {
        if (PyErr_Occurred())
            PyErr_Print();
        PyErr_SetString(PyExc_TypeError, "retval should be None");
        Py_DECREF(py_retval);
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    
    Py_DECREF(py_retval);
    Py_DECREF(py_method);
    Py_DECREF(py_args);
    Py_DECREF(py_self);
    pyg_gil_state_release(__py_state);
}
%%
override GladeWidgetAdaptor__do_child_get_property kwargs
static PyObject *
_wrap_GladeWidgetAdaptor__do_child_get_property(PyObject *cls, PyObject *args, PyObject *kwargs)
{
    gpointer klass;
    static char *kwlist[] = { "self", "container", "child", "property_name", NULL };
    PyGObject *self, *container, *child;
    char *property_name;
    PyObject *ret;
    GValue value = { 0, } ;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!O!O!s:GladeWidgetAdaptor.child_get_property", kwlist, &PyGladeWidgetAdaptor_Type, &self, &PyGObject_Type, &container, &PyGObject_Type, &child, &property_name))
        return NULL;
    klass = g_type_class_ref(pyg_type_from_object(cls));
    if (GLADE_WIDGET_ADAPTOR_CLASS(klass)->child_get_property)
    {
	glade_python_support_init_value (child->obj, TRUE, property_name, &value);
        GLADE_WIDGET_ADAPTOR_CLASS(klass)->child_get_property(GLADE_WIDGET_ADAPTOR(self->obj), G_OBJECT(container->obj), G_OBJECT(child->obj), property_name, &value);
	ret = pyg_value_as_pyobject (&value, TRUE);
	g_value_unset (&value);
    }
    else {
        PyErr_SetString(PyExc_NotImplementedError, "virtual method GladeWidgetAdaptor.child_get_property not implemented");
        g_type_class_unref(klass);
        return NULL;
    }
    g_type_class_unref(klass);
    return ret;
}
%%
override GladeWidgetAdaptor__proxy_do_child_get_property
static void
_wrap_GladeWidgetAdaptor__proxy_do_child_get_property(GladeWidgetAdaptor *self, GObject*container, GObject*child, const gchar*property_name, GValue *value)
{
    PyGILState_STATE __py_state;
    PyObject *py_self;
    PyObject *py_container = NULL;
    PyObject *py_child = NULL;
    PyObject *py_property_name;
    PyObject *py_retval;
    PyObject *py_args;
    PyObject *py_method;
    
    __py_state = pyg_gil_state_ensure();
    py_self = pygobject_new((GObject *) self);
    if (!py_self) {
        if (PyErr_Occurred())
            PyErr_Print();
        pyg_gil_state_release(__py_state);
        return;
    }
    if (container)
        py_container = pygobject_new((GObject *) container);
    else {
        Py_INCREF(Py_None);
        py_container = Py_None;
    }
    if (child)
        py_child = pygobject_new((GObject *) child);
    else {
        Py_INCREF(Py_None);
        py_child = Py_None;
    }
    py_property_name = PyString_FromString(property_name);
    if (!py_property_name) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_child);
        Py_DECREF(py_container);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    
    py_args = PyTuple_New(3);
    PyTuple_SET_ITEM(py_args, 0, py_container);
    PyTuple_SET_ITEM(py_args, 1, py_child);
    PyTuple_SET_ITEM(py_args, 2, py_property_name);
    
    py_method = PyObject_GetAttrString(py_self, "do_child_get_property");
    if (!py_method) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    py_retval = PyObject_CallObject(py_method, py_args);
    if (!py_retval) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    
    pyg_value_from_pyobject (value, py_retval);
   
    Py_DECREF(py_retval);
    Py_DECREF(py_method);
    Py_DECREF(py_args);
    Py_DECREF(py_self);
    pyg_gil_state_release(__py_state);
}
%%
override GladeWidgetAdaptor__do_get_children kwargs
static PyObject *
_wrap_GladeWidgetAdaptor__do_get_children(PyObject *cls, PyObject *args, PyObject *kwargs)
{
    gpointer klass;
    static char *kwlist[] = { "self", "container", NULL };
    PyGObject *self, *container;
    PyObject *list;
    GList *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!O!:GladeWidgetAdaptor.get_children", kwlist, &PyGladeWidgetAdaptor_Type, &self, &PyGObject_Type, &container))
        return NULL;
    klass = g_type_class_ref(pyg_type_from_object(cls));
    if (GLADE_WIDGET_ADAPTOR_CLASS(klass)->get_children)
        ret = GLADE_WIDGET_ADAPTOR_CLASS(klass)->get_children(GLADE_WIDGET_ADAPTOR(self->obj), G_OBJECT(container->obj));
    else {
        PyErr_SetString(PyExc_NotImplementedError, "virtual method GladeWidgetAdaptor.get_children not implemented");
        g_type_class_unref(klass);
        return NULL;
    }
    g_type_class_unref(klass);

    list = glade_python_support_list_from_glist (ret);
    g_list_free (ret);
    return list;
}
%%
override GladeWidgetAdaptor__proxy_do_get_children
static GList*
_wrap_GladeWidgetAdaptor__proxy_do_get_children(GladeWidgetAdaptor *self, GObject*container)
{
    PyGILState_STATE __py_state;
    PyObject *py_self;
    PyObject *py_container = NULL;
    GList* retval;
    PyObject *py_retval;
    PyObject *py_args;
    PyObject *py_method;
    
    __py_state = pyg_gil_state_ensure();
    py_self = pygobject_new((GObject *) self);
    if (!py_self) {
        if (PyErr_Occurred())
            PyErr_Print();
        pyg_gil_state_release(__py_state);
        return NULL;
    }
    if (container)
        py_container = pygobject_new((GObject *) container);
    else {
        Py_INCREF(Py_None);
        py_container = Py_None;
    }
    
    py_args = PyTuple_New(1);
    PyTuple_SET_ITEM(py_args, 0, py_container);
    
    py_method = PyObject_GetAttrString(py_self, "do_get_children");
    if (!py_method) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return NULL;
    }
    py_retval = PyObject_CallObject(py_method, py_args);
    if (!py_retval) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return NULL;
    }
	
    retval = glade_python_support_glist_from_list (py_retval);
    
    Py_DECREF(py_retval);
    Py_DECREF(py_method);
    Py_DECREF(py_args);
    Py_DECREF(py_self);
    pyg_gil_state_release(__py_state);
    
    return retval;
}
%%
